{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"GreyCloud Documentation - Overview What is GreyCloud? GreyCloud is a software for managing cloud computing services. It can be hosted on Linux with apache or mod_wsgi and is able to run on any other PC. The software offers different APIs for services to get started into cloud development rapidly. GreyCloud is easy to use for beginners and professionals and works on small laptops as good as high end servers. Licensing GreyCloud is licensed under the GNU GPL v3 (General Public License). Note that the software includes \"defusedxml\", a secure XML parser. Defusedxml is licensed under the PSF. Download You can download the latest GreyCloud version from GitHub . To use GreyCloud for servers and productive development, it is recommended to use a stable version of the software. If you want to explore new features, you can download a pre release, too. Note that pre releases might be instable.","title":"Overview"},{"location":"index.html#greycloud-documentation-overview","text":"","title":"GreyCloud Documentation - Overview"},{"location":"index.html#what-is-greycloud","text":"GreyCloud is a software for managing cloud computing services. It can be hosted on Linux with apache or mod_wsgi and is able to run on any other PC. The software offers different APIs for services to get started into cloud development rapidly. GreyCloud is easy to use for beginners and professionals and works on small laptops as good as high end servers.","title":"What is GreyCloud?"},{"location":"index.html#licensing","text":"GreyCloud is licensed under the GNU GPL v3 (General Public License). Note that the software includes \"defusedxml\", a secure XML parser. Defusedxml is licensed under the PSF.","title":"Licensing"},{"location":"index.html#download","text":"You can download the latest GreyCloud version from GitHub . To use GreyCloud for servers and productive development, it is recommended to use a stable version of the software. If you want to explore new features, you can download a pre release, too. Note that pre releases might be instable.","title":"Download"},{"location":"apis.html","text":"GreyCloud Documentation- APIs Database API The database API gives access to a databases system over HTTP. The database API supports SQLite3 and MySQL databases. It is using Django's database backends for connections. 'execute_sql' The 'execute_sql' database API has the following URL: /databases/apis/execute_sql/v<version-code>/<database> . It executes a SQL query from the sql_query argument sended over POST or GET. The API returns a list mapped into the GreyCloud Service XML Format. Web service API The web service API calls a function from a web service written in Python3. 'xml_call' The 'service_call' web service API has the following URL: /services/apis/xml_call/v<version-code>/<web-service>/<function> . It executes a public function from a web service. To do that, a service request in the GreyCloud Service XML Format is send in the service_request argument over POST or GET. The API returns a xml service response in the GreyCloud Service XML Format.","title":"APIs"},{"location":"apis.html#greycloud-documentation-apis","text":"","title":"GreyCloud Documentation- APIs"},{"location":"apis.html#database-api","text":"The database API gives access to a databases system over HTTP. The database API supports SQLite3 and MySQL databases. It is using Django's database backends for connections.","title":"Database API"},{"location":"apis.html#execute_sql","text":"The 'execute_sql' database API has the following URL: /databases/apis/execute_sql/v<version-code>/<database> . It executes a SQL query from the sql_query argument sended over POST or GET. The API returns a list mapped into the GreyCloud Service XML Format.","title":"'execute_sql'"},{"location":"apis.html#web-service-api","text":"The web service API calls a function from a web service written in Python3.","title":"Web service API"},{"location":"apis.html#xml_call","text":"The 'service_call' web service API has the following URL: /services/apis/xml_call/v<version-code>/<web-service>/<function> . It executes a public function from a web service. To do that, a service request in the GreyCloud Service XML Format is send in the service_request argument over POST or GET. The API returns a xml service response in the GreyCloud Service XML Format.","title":"'xml_call'"},{"location":"base.html","text":"GreyCloud Documentation- XXX","title":"GreyCloud Documentation- XXX"},{"location":"base.html#greycloud-documentation-xxx","text":"","title":"GreyCloud Documentation- XXX"},{"location":"greycloud_service_xml_format.html","text":"GreyCloud Documentation- GreyCloud Service XML Format GreyCloud uses an own XML format for communication with the APIs: The GreyCloud Service XML Format. It can contain service requests, service responses or serialized objects. Datatypes The GreyCloud Service XML Format has the following datatypes: xml_int : Represents an integer. xml_float : Represents a float number. xml_str : Represents a string. xml_null : Represents an empty datatype (none/null). xml_list : Represents a list. The list can contain any datatype, including a list itself. xml_bytes : Represents a list of bytes. Each byte is a xml_int which has a value between 0 and 255. xml_dict : Represents a dictionary. Each entry is a tag with the format <key name=\"name\"><xml_...>...</xml_...></key> Each XML datatype is an own tag. Serialized objects Serialized objects have the following scheme: <serialized_data> <xml_...>...</xml_...> </serialized_data> <serialized_data> can only contain one datatype. Service request Service requests have the following format: <service_request> <argument> <xml_...>...</xml_...> </argument> <argument> <xml_...>...</xml_...> </argument> ... </service_request> Each <argument></argument> contains one datatype. Service response Service responses have the following format: <service_response> <error> <xml_...>...</xml_...> ... </error> <result> <xml_...>...</xml_...> </result> </service_response> <error></error> represents the argument of an exception. Each exception argument is a XML datatype. <result></result> contains one XML datatype with the result.","title":"GreyCloud Service XML Format"},{"location":"greycloud_service_xml_format.html#greycloud-documentation-greycloud-service-xml-format","text":"GreyCloud uses an own XML format for communication with the APIs: The GreyCloud Service XML Format. It can contain service requests, service responses or serialized objects.","title":"GreyCloud Documentation- GreyCloud Service XML Format"},{"location":"greycloud_service_xml_format.html#datatypes","text":"The GreyCloud Service XML Format has the following datatypes: xml_int : Represents an integer. xml_float : Represents a float number. xml_str : Represents a string. xml_null : Represents an empty datatype (none/null). xml_list : Represents a list. The list can contain any datatype, including a list itself. xml_bytes : Represents a list of bytes. Each byte is a xml_int which has a value between 0 and 255. xml_dict : Represents a dictionary. Each entry is a tag with the format <key name=\"name\"><xml_...>...</xml_...></key> Each XML datatype is an own tag.","title":"Datatypes"},{"location":"greycloud_service_xml_format.html#serialized-objects","text":"Serialized objects have the following scheme: <serialized_data> <xml_...>...</xml_...> </serialized_data> <serialized_data> can only contain one datatype.","title":"Serialized objects"},{"location":"greycloud_service_xml_format.html#service-request","text":"Service requests have the following format: <service_request> <argument> <xml_...>...</xml_...> </argument> <argument> <xml_...>...</xml_...> </argument> ... </service_request> Each <argument></argument> contains one datatype.","title":"Service request"},{"location":"greycloud_service_xml_format.html#service-response","text":"Service responses have the following format: <service_response> <error> <xml_...>...</xml_...> ... </error> <result> <xml_...>...</xml_...> </result> </service_response> <error></error> represents the argument of an exception. Each exception argument is a XML datatype. <result></result> contains one XML datatype with the result.","title":"Service response"},{"location":"greycloud_settings.html","text":"GreyCloud Documentation- GreyCloud settings usersettings.conf The file app_data/conf/usersettings.conf contains the basic GreyCloud configurations in JSON format. It has the following properties: \"ALLOWED_HOSTS\" : A list of hosts which are trustful and can connect to GreyCloud. Set only one entry \"*\" if you want to allow all hosts to connect to GreyCloud. \"DEBUG\" : true or false . If debugging is on, error messages are shown. Deactivate debugging if you use GreyCloud in productive environments. DATABASE : A dictionary with database settings. \"ENGINE\" can be \"django.db.backends.sqlite3\" for SQLite3 or \"django.db.backends.mysql\" for MySQL. \"NAME\" is the name of the database. If you use SQLite, the name has to be a filename without any path (it is recommended to use \"db.djdb\"). If you use SQLite as db backend, you don't need \"USER\" , \"PASSWORD\" , \"HOST\" and \"PORT\" . \"USE_TIMEZONE\" : true or false . Set to true to use Django with timezones. \"TIMEZONE\" : The timezone used by Django. \"SECURE\" : true or false . Set to true if you host Django on Apache and want to use HTTPS. \"SSL_HEADER_CHECK\" : true or false . Sets Django's \" variable SECURE_PROXY_SSL_HEADER to (\"HTTP_X_FORWARDED_PROTO\", \"https\") in \"GreyCloud/settings.py\". Set this only to true if you use GreyCloud behind a proxy server validating requests over HTTPS. See more here . \"USE_APACHE\" : true or false . Set to true if you host GreyCloud on Apache. \"PYTHON_VERSION\" : A string with the Python version used. You only need this if you host GreyCloud on Apache. \"VENV_ROOT\" : A string with the path to a virtual Python environment. If you don't host GreyCloud on the Apache web server, set this to \"\" . \"STATIC_URL\" : A string with the URL to a server where the static files are stored. Set this to \"/static/\" if you want to save your static files locally in \"app_data/static\".","title":"GreyCloud settings"},{"location":"greycloud_settings.html#greycloud-documentation-greycloud-settings","text":"","title":"GreyCloud Documentation- GreyCloud settings"},{"location":"greycloud_settings.html#usersettingsconf","text":"The file app_data/conf/usersettings.conf contains the basic GreyCloud configurations in JSON format. It has the following properties: \"ALLOWED_HOSTS\" : A list of hosts which are trustful and can connect to GreyCloud. Set only one entry \"*\" if you want to allow all hosts to connect to GreyCloud. \"DEBUG\" : true or false . If debugging is on, error messages are shown. Deactivate debugging if you use GreyCloud in productive environments. DATABASE : A dictionary with database settings. \"ENGINE\" can be \"django.db.backends.sqlite3\" for SQLite3 or \"django.db.backends.mysql\" for MySQL. \"NAME\" is the name of the database. If you use SQLite, the name has to be a filename without any path (it is recommended to use \"db.djdb\"). If you use SQLite as db backend, you don't need \"USER\" , \"PASSWORD\" , \"HOST\" and \"PORT\" . \"USE_TIMEZONE\" : true or false . Set to true to use Django with timezones. \"TIMEZONE\" : The timezone used by Django. \"SECURE\" : true or false . Set to true if you host Django on Apache and want to use HTTPS. \"SSL_HEADER_CHECK\" : true or false . Sets Django's \" variable SECURE_PROXY_SSL_HEADER to (\"HTTP_X_FORWARDED_PROTO\", \"https\") in \"GreyCloud/settings.py\". Set this only to true if you use GreyCloud behind a proxy server validating requests over HTTPS. See more here . \"USE_APACHE\" : true or false . Set to true if you host GreyCloud on Apache. \"PYTHON_VERSION\" : A string with the Python version used. You only need this if you host GreyCloud on Apache. \"VENV_ROOT\" : A string with the path to a virtual Python environment. If you don't host GreyCloud on the Apache web server, set this to \"\" . \"STATIC_URL\" : A string with the URL to a server where the static files are stored. Set this to \"/static/\" if you want to save your static files locally in \"app_data/static\".","title":"usersettings.conf"},{"location":"hosting.html","text":"GreyCloud Documentation- Hosting Warning! You need professional administration skills for configuring Apache and GreyCloud. If the configurations are not correct, this might cause into security issues. This tutorial gives only a basic overview of the hosting process and has no claim to completeness and correctness! Virtual Python environment It is recommended to host GreyCloud in a virtual Python environement. To create virtual Python enviroments, you first need to install the 'virtualenv' package by running pip install virtualenv . After that, you can create a new environment with virtualenv GreyCloudEnv . Activate the Python interpreter with source GreyCloudEnv/bin/activate and install Django and PyMySQL by running pip install django=2.0 pymysql . Cofigure Apache To host GreyCloud on the Apache web server, you have to install mod_wsgi. On Debian based systems like Ubuntu, you can install mod_wsgi with sudo apt-get install libapache2-mod-wsgi-py3 . After that, you have to enable mod_wsgi by running sudo a2enmod wsgi in your terminal. Create a new <site>.conf file in /etc/apache2/sites-available with the following content (replace '...' with other settings): <VirtualHost myhost.com:8080> ... Alias /static /var/www/html/GreyCloud/app_data/static <Directory /var/www/html/GreyCloud/app_data/static> Require all granted </Directory> <Directory /var/www/html/GreyCloud/GreyCloud> <Files wsgi.py> Require all granted </Files> </Directory> WSGIDaemonProcess GreyCloud python-home=/path/to/GreyCloudEnv WSGIProcessGroup GreyCloud WSGIScriptAlias / /var/www/html/GreyCloud/GreyCloud/wsgi.py </VirtualHost> If you want to use GreyCloud on an other port than 80, you have to add Listen <your port number> to /etc/apache2/ports.conf . Enable your vittual host file by running sudo a2ensite <site>.conf in a terminal. Configure GreyCloud Download the GreyCloud server .zip or .tar file and unpack the archive into your Apache server root (normally /var/www/html ). Rename the GreyCloud server folder into \"GreyCloud\". Open GreyCloud/app_data/conf/usersettings.conf in a text editor. Set DEBUG to false, PYTHON_VERSION to your Python virtual environment version, VENV_ROOT to your virtual environment path. Read more about GreyCloud settings here . Set up database Set up your database with sudo python launcher.py install . Change permissions To give Apache access to the files, change the group of GreyCloud to www-data and grant it read-only permission. After that, grant www-data read and write permissions for GreyCloud/app_data .","title":"Hosting"},{"location":"hosting.html#greycloud-documentation-hosting","text":"Warning! You need professional administration skills for configuring Apache and GreyCloud. If the configurations are not correct, this might cause into security issues. This tutorial gives only a basic overview of the hosting process and has no claim to completeness and correctness!","title":"GreyCloud Documentation- Hosting"},{"location":"hosting.html#virtual-python-environment","text":"It is recommended to host GreyCloud in a virtual Python environement. To create virtual Python enviroments, you first need to install the 'virtualenv' package by running pip install virtualenv . After that, you can create a new environment with virtualenv GreyCloudEnv . Activate the Python interpreter with source GreyCloudEnv/bin/activate and install Django and PyMySQL by running pip install django=2.0 pymysql .","title":"Virtual Python environment"},{"location":"hosting.html#cofigure-apache","text":"To host GreyCloud on the Apache web server, you have to install mod_wsgi. On Debian based systems like Ubuntu, you can install mod_wsgi with sudo apt-get install libapache2-mod-wsgi-py3 . After that, you have to enable mod_wsgi by running sudo a2enmod wsgi in your terminal. Create a new <site>.conf file in /etc/apache2/sites-available with the following content (replace '...' with other settings): <VirtualHost myhost.com:8080> ... Alias /static /var/www/html/GreyCloud/app_data/static <Directory /var/www/html/GreyCloud/app_data/static> Require all granted </Directory> <Directory /var/www/html/GreyCloud/GreyCloud> <Files wsgi.py> Require all granted </Files> </Directory> WSGIDaemonProcess GreyCloud python-home=/path/to/GreyCloudEnv WSGIProcessGroup GreyCloud WSGIScriptAlias / /var/www/html/GreyCloud/GreyCloud/wsgi.py </VirtualHost> If you want to use GreyCloud on an other port than 80, you have to add Listen <your port number> to /etc/apache2/ports.conf . Enable your vittual host file by running sudo a2ensite <site>.conf in a terminal.","title":"Cofigure Apache"},{"location":"hosting.html#configure-greycloud","text":"Download the GreyCloud server .zip or .tar file and unpack the archive into your Apache server root (normally /var/www/html ). Rename the GreyCloud server folder into \"GreyCloud\". Open GreyCloud/app_data/conf/usersettings.conf in a text editor. Set DEBUG to false, PYTHON_VERSION to your Python virtual environment version, VENV_ROOT to your virtual environment path. Read more about GreyCloud settings here .","title":"Configure GreyCloud"},{"location":"hosting.html#set-up-database","text":"Set up your database with sudo python launcher.py install .","title":"Set up database"},{"location":"hosting.html#change-permissions","text":"To give Apache access to the files, change the group of GreyCloud to www-data and grant it read-only permission. After that, grant www-data read and write permissions for GreyCloud/app_data .","title":"Change permissions"},{"location":"quickstart.html","text":"GreyCloud Documentation- Quick start Install dependencies GreyCloud uses Django 2.0. To install Django, you need Python >= 3.4. You can download Python from https://www.python.org/downloads/ . Install Django 2.0 by running pip install django==2.0 in a terminal. To use MySQL, you also have to install mysqlclient with pip install mysqlclient . Set up database If you didn't install GreyCloud yet, run python launcher.py install . This will: generate a secret key in app_data/conf/secret_key.keyfile generate a SQLite database app_data/db/db.djdb collect all static files in the folders migrate all models to the database generate the website create a new superuser If you want to use another database database system, read the 'GreyCloud settings' page. Start local server To start GreyCloud on a local machine, run python launcher.py devserver . This will start a small server application. Now you are able to open the GreyCloud homepage in a web browser with the URL localhost:8000 . Warning! The built-in server is only for development! For a productive server, you can host GreyCloud on Linux with the Apache web server. Dashboard You can administrate all your services from the GreyCloud dashboard. To open the Dashboard, you can click on the link \"GreyCloud administration\". Creating web services with Python To create web services for GreyCloud, you first have to write a python script like this: @public_modifier def f(ignore): import math sinus = math.sin(20) testmodule = import_module(\"test\", \"/home/scripts/test.py\") return (\"Hallo\", sinus, testmodule.returner(None)) To make a function available for the GreyCloud web service API, you need to decorate it with public_modifier . Note that the import statement has to be placed in the function to make this code snippet work. To import a script from the GreyCloud filesystem, you can use import_module . This function has an imaginary module name as first parameter and the path to the script as a second parameter. Imported scripts behave like normal Python scripts. After you wrote your web service, you can upload your scripts to the GreyCloud filesystem.","title":"Quick start"},{"location":"quickstart.html#greycloud-documentation-quick-start","text":"","title":"GreyCloud Documentation- Quick start"},{"location":"quickstart.html#install-dependencies","text":"GreyCloud uses Django 2.0. To install Django, you need Python >= 3.4. You can download Python from https://www.python.org/downloads/ . Install Django 2.0 by running pip install django==2.0 in a terminal. To use MySQL, you also have to install mysqlclient with pip install mysqlclient .","title":"Install dependencies"},{"location":"quickstart.html#set-up-database","text":"If you didn't install GreyCloud yet, run python launcher.py install . This will: generate a secret key in app_data/conf/secret_key.keyfile generate a SQLite database app_data/db/db.djdb collect all static files in the folders migrate all models to the database generate the website create a new superuser If you want to use another database database system, read the 'GreyCloud settings' page.","title":"Set up database"},{"location":"quickstart.html#start-local-server","text":"To start GreyCloud on a local machine, run python launcher.py devserver . This will start a small server application. Now you are able to open the GreyCloud homepage in a web browser with the URL localhost:8000 . Warning! The built-in server is only for development! For a productive server, you can host GreyCloud on Linux with the Apache web server.","title":"Start local server"},{"location":"quickstart.html#dashboard","text":"You can administrate all your services from the GreyCloud dashboard. To open the Dashboard, you can click on the link \"GreyCloud administration\".","title":"Dashboard"},{"location":"quickstart.html#creating-web-services-with-python","text":"To create web services for GreyCloud, you first have to write a python script like this: @public_modifier def f(ignore): import math sinus = math.sin(20) testmodule = import_module(\"test\", \"/home/scripts/test.py\") return (\"Hallo\", sinus, testmodule.returner(None)) To make a function available for the GreyCloud web service API, you need to decorate it with public_modifier . Note that the import statement has to be placed in the function to make this code snippet work. To import a script from the GreyCloud filesystem, you can use import_module . This function has an imaginary module name as first parameter and the path to the script as a second parameter. Imported scripts behave like normal Python scripts. After you wrote your web service, you can upload your scripts to the GreyCloud filesystem.","title":"Creating web services with Python"},{"location":"sdk.html","text":"GreyCloud Documentation- SDK GreyCloud command line tool The GreyCloud SDK includes a command line tool for calling GreyCloud APIs. You can find the cli in the python folder of the SDK. The command line tool is written in Python3 and can be executed by running python gccli.py [OPTIONS] . The GreyCloud cli has the following options: -m / --mode : The cli mode: \"http\" for a simple HTTP client, \"sql\" for a database shell and \"service\" for service calls -s / --server : The URL to a GreyCloud server: Has to have scheme http[s]://server:port/[path/to/GreyCloud/] -ca / --cafile : A path to a client SSL certificate. Required if server uses HTTPS. -cap / --capath : A path to a folder where client certificates are stored -h / --help : Shows a help message You can change the default values for all options in console_defaults.settings.json : MODE : The default for -m SERVER : The default for -s CAFILE : The default for -ca CAPATH :The default for -cap GreyCloud cli SQL shell The GreyCloud SQL shell allows you to send SQL queries to the database API. Note that you can only execute one query per request. GreyCloud cli web service shell The web service shell allows you to call web service functions. To do that, type the function name into the prompt and press enter. Now you can enter your arguments as a Python tuple. GreyCloud cli HTTP client With the GreyCloud cli HTTP client you are able to send GET requests to any server. Type cd <path> to change the current directory in the web server. Type get ./example.html?argument1=bla&argument2=blub for example to send a request to a html page \"example\" in the current directory. GreyCloud Python API To access to GreyCloud APIs with Python, you can import the package GreyCloud.API . The package has the following modules: base : includes a basic HTTP client for GET and POST requests service_XML : includes procedures for mapping objects to the GreyCloud Service XML Format service_api : includes the GreyCloud service call API client sql_api : includes the GreyCloud database API client cloud_api : includes a client for all standard GreyCloud APIs Here is a code example how to use GreyCloud: from GreyCloud.API.cloud_api import Cloud # represents a GreyCloud server server = Cloud(\"http://localhost:8000/\") # database example con = server.getDatabase(\"db_test\") print(con.execute_sql(\"select * from test\")) # service example service = server.getService(\"service_test\") print(service.call_function(\"f\", (None,))) You can find the full Python API documentation here .","title":"SDK"},{"location":"sdk.html#greycloud-documentation-sdk","text":"","title":"GreyCloud Documentation- SDK"},{"location":"sdk.html#greycloud-command-line-tool","text":"The GreyCloud SDK includes a command line tool for calling GreyCloud APIs. You can find the cli in the python folder of the SDK. The command line tool is written in Python3 and can be executed by running python gccli.py [OPTIONS] . The GreyCloud cli has the following options: -m / --mode : The cli mode: \"http\" for a simple HTTP client, \"sql\" for a database shell and \"service\" for service calls -s / --server : The URL to a GreyCloud server: Has to have scheme http[s]://server:port/[path/to/GreyCloud/] -ca / --cafile : A path to a client SSL certificate. Required if server uses HTTPS. -cap / --capath : A path to a folder where client certificates are stored -h / --help : Shows a help message You can change the default values for all options in console_defaults.settings.json : MODE : The default for -m SERVER : The default for -s CAFILE : The default for -ca CAPATH :The default for -cap","title":"GreyCloud command line tool"},{"location":"sdk.html#greycloud-cli-sql-shell","text":"The GreyCloud SQL shell allows you to send SQL queries to the database API. Note that you can only execute one query per request.","title":"GreyCloud cli SQL shell"},{"location":"sdk.html#greycloud-cli-web-service-shell","text":"The web service shell allows you to call web service functions. To do that, type the function name into the prompt and press enter. Now you can enter your arguments as a Python tuple.","title":"GreyCloud cli web service shell"},{"location":"sdk.html#greycloud-cli-http-client","text":"With the GreyCloud cli HTTP client you are able to send GET requests to any server. Type cd <path> to change the current directory in the web server. Type get ./example.html?argument1=bla&argument2=blub for example to send a request to a html page \"example\" in the current directory.","title":"GreyCloud cli HTTP client"},{"location":"sdk.html#greycloud-python-api","text":"To access to GreyCloud APIs with Python, you can import the package GreyCloud.API . The package has the following modules: base : includes a basic HTTP client for GET and POST requests service_XML : includes procedures for mapping objects to the GreyCloud Service XML Format service_api : includes the GreyCloud service call API client sql_api : includes the GreyCloud database API client cloud_api : includes a client for all standard GreyCloud APIs Here is a code example how to use GreyCloud: from GreyCloud.API.cloud_api import Cloud # represents a GreyCloud server server = Cloud(\"http://localhost:8000/\") # database example con = server.getDatabase(\"db_test\") print(con.execute_sql(\"select * from test\")) # service example service = server.getService(\"service_test\") print(service.call_function(\"f\", (None,))) You can find the full Python API documentation here .","title":"GreyCloud Python API"}]}