SDK and APIs

Command line

The GreyCloud SDK has a command line tool written in Python 3. It allows to access to a database or a service. Another feature is the integrated HTTP request shell.

The command line tool can be configured by editing the settings in ‘console_defaults.settings.json’.
Here you can edit the default URL for the server, the console type which is started and the path to a certificate or a folder with certificates. Note that backslashes have to be replaced with double backslashes.

The following options are available for the command line tool:
-s / --server : The URL to the server. The URL has to be have the scheme http[s]://host[:port]/[path/to/GreyCloud/]
-m / --mode: The type of the console
-ca / --cafile : The path to a valid certificate
-cap / --capath : The path to a folder with valid certificates

To execute SQL queries for a database, run
#python console.py –m sql
in the shell of your operating system. Next, you enter the name of your databases. Now you can execute SQL queries and see the results.

To call procedures from a service, run
#python console.py –m service
Next, you enter the name of the service you want to use.

To use the HTTP command line, run
#python console.py –m http
To change the directory, type
> cd /path
To send a GET request to a server, type
> get /path?argument1=test&argument2=123
If you use a point instead of a path, the current directory will be used.
 
4.2 Python

To use the GreyCloud API with Python 3, download the SDK for your GreyCloud version from GitHub. 
Extract the archive and copy the package ‘GreyCloud’ into your project. It is also possible to install the package into the Python environment. 
The following code shows, how you can connect to a server: 

from GreyCloud.API.cloud_api import Cloud

server = Cloud("http://localhost:8000/")
# Database example
con = server.getDatabase("db_test")
print(con.execute_sql("select * from test"))
# Service example
service = server.getService("service_test")
print(service.call_function("f", (None,)))

First, the module cloud_api from the GreyCloud.API package is imported. The class Cloud in cloud_api represents a server. The first argument is a string with the URL to the server. The URL has to have the scheme http[s]://host[:port]/[path/to/GreyCloud/]. The optional keyword arguments capath and cafile are relevant for connections over HTTPS. cafile is the path to a single certificate, while capath points to a folder where your CA files are.
The getXXX(name) method returns a sub class from GreyCloud.API.base.ServiceBaseClass. To execute SQL into a GreyCloud database, the database connection has a method named execute_sql. A remote procedure in a service can be executed using call_function(func, args). Note that args has to be a tuple.

Services with Python

To write services with Python, it is recommended to create a main script, where all public functions are registered, and a library, which implements all functions including non-public procedures. In the main script, you can register a function by using the decorator @public_modifier. Note that imports have to be in the defined in the function function. With import_module(name, path) you are able to import and execute another script. Scripts you import with import_module behave like normal Python scripts.

main.py:
@public_modifier
def f(ignore):
    sinus = math.sin(20)
    test2 = import_module("test", "/home/scripts/test.py")
    return ("Hallo", sinus, test2.returner(None))

test.py:
import django
import math
def returner(ignore):
	return ("Welt", math.sin(20), django.get_version())
